
#
## astyle configuration file
#

# Allman style uses broken braces. -A1
#--style=allman  # -A1
# Java style formatting/indenting uses attached brackets. -A2
--style=java
# Kernighan & Ritchie style uses linux braces. -A3
#--style=kr
# Stroustrup style uses linux braces with closing headers broken from closing braces. -A4
#--style=stroustrup
# Whitesmith style uses broken, indented braces. -A5
#--style=whitesmith
# VTK (Visualization Toolkit) style uses broken, indented braces, except for 
# the opening brace of classes, arrays, structs, enums, and function definitions. -A15
#--style=vtk
# Ratliff style uses attached, indented braces. -A6
#--style=ratliff
# GNU style uses broken braces. -A7
#--style=gnu
# Linux style uses linux braces. -A8
#--style=linux
# Horstmann style uses broken braces and run-in statements.  -A9
#--style=horstmann
# "One True Brace Style" uses linux braces and adds braces to unbraced one line conditional statements. -A10
#--style=1tbs
# Google style uses attached braces and indented class access modifiers. -A14
#--style=google
# Mozilla style uses linux braces. -A16
#--style=mozilla
# Pico style uses broken braces and run-in statements with attached closing braces. -A11
#--style=pico
# Lisp style uses attached opening and closing braces. -A12
#--style=lisp

# When used with --style=java, --style=kr, --style=stroustrup, --style=linux, 
# or --style=1tbs, this breaks closing headers (e.g. 'else', 'catch', ...) from 
# their immediately preceding closing brackets. Closing header brackets are 
# always broken with the other styles.
--break-closing-brackets

# Insert empty lines around unrelated blocks, labels, classes, ...
#--break-blocks

# Insert space padding around operators. Any end of line comments will remain 
# in the original column, if possible. Note that there is no option to unpad. 
# Once padded, they stay padded.
--pad-oper

# Insert space padding after commas. This is not needed if pad-oper is used. 
# Any end of line comments will remain in the original column, if possible. 
# Note that there is no option to unpad. Once padded, they stay padded.
#--pad-comma

# Insert space padding around parens on both the outside and the inside. 
# Any end of line comments will remain in the original column, if possible.
#--pad-paren

# Insert space padding around parens on the outside only. Parens that are empty 
# will not be padded. Any end of line comments will remain in the original column, 
# if possible. This can be used with unpad-paren below to remove unwanted spaces.
--pad-paren-out

# Insert space padding around the first paren in a series on the outside only. 
# Parens that are empty will not be padded. Any end of line comments will remain 
# in the original column, if possible. This can be used with unpad-paren below to 
# remove unwanted spaces. If used with pad‑paren or pad‑paren‑out, this option 
# will be ignored. If used with pad‑paren‑in, the result will be the pad‑paren.
#--pad-first-paren-out

# Insert space padding around paren on the inside only. Any end of line comments 
# will remain in the original column, if possible. This can be used with 
# unpad-paren below to remove unwanted spaces.
#--pad-paren-in

# Insert space padding after paren headers only (e.g. 'if', 'for', 'while'...). 
# Any end of line comments will remain in the original column, if possible. 
# This can be used with unpad-paren to remove unwanted spaces.
#--pad-header

# Remove unnecessary space padding around parenthesis. This
# can be used in combination with the 'pad' options above.
--unpad-paren

# Remove brackets from a bracketed one line conditional statements.
#--remove-brackets

# Convert tabs to the appropriate number of spaces.
--convert-tabs

# Indent using # spaces per indent (e.g. -s3 --indent=spaces=3). 
# must be between 2 and 20. Not specifying
# will result in a default of 4 spaces per indent.
--indent=spaces=2

# Indent multi-line preprocessor #define statements.
--indent-preproc-define

# Indent preprocessor conditional statements #if/#else/#endif
# to the same level as the source code.
--indent-preproc-cond


# Attach brackets to a namespace statement. This is done regardless of the bracket style being used.
--attach-namespaces

# Attach brackets to a class statement. This is done regardless of the bracket style being used.
--attach-classes

# Indent 'class' and 'struct' blocks so that the entire block is indented. The struct blocks are indented only if an access modifier, 'public:', 'protected:' or 'private:', is declared somewhere in the struct. This option is effective for C++ files only.
--indent-classes

# Indent 'class' and 'struct' access modifiers, 'public:', 'protected:' and 'private:', one half indent. The rest of the class is not indented. This option is effective for C++ files only. If used with indent‑classes this option will be ignored.
--indent-modifiers

# Indent 'switch' blocks so that the 'case X:' statements are indented in the switch block. The entire case block is indented.
--indent-switches

# Add extra indentation to namespace blocks. This option has no effect on Java files.
--indent-namespaces

# Add extra indentation to labels so they appear 1 indent less than the current indentation, rather than being flushed to the left.
#--indent-labels

# Indent C++ comments beginning in column one. By default C++ comments beginning in column one are not indented. This option will allow the comments to be indented with the code.
--indent-col1-comments

# Add braces to unbraced one line conditional statements (e.g. 'if', 'for', 
# 'while'...). The statement must be on a single line. 
# The braces will be added according to the requested brace style. 
# If no style is requested the braces will be attached. 
--add-brackets

# Set the  maximum of # spaces to indent a continuation line. The # indicates a number of columns and must not be greater than 120. If no # is set, the default value of 40 will be used. A maximum of less than two indent lengths will be ignored. This option will prevent continuation lines from extending too far to the right. Setting a larger value will allow the code to be extended further to the right.
--max-instatement-indent=120

# Attach a pointer or reference operator (*, &, or ^) to either the variable type (left) or variable name (right), or place it between the type and name (middle). The spacing between the type and name will be preserved, if possible. This option is for C/C++, C++/CLI, and C# files. To format references separately use the following align-reference option.
--align-pointer=name

# This option will align references separate from pointers. Pointers are not changes by this option. If pointers and references are to be aligned the same, use the previous align-pointer option. The option align-reference=none will not change the reference alignment. The other options are the same as for align-pointer. This option is for C/C++, C++/CLI, and C# files.
--align-reference=name

# Remove the preceding '*' in a multi-line comment that begins a line. A trailing '*', if present, is also removed. Text that is less than one is indent is indented to one indent. Text greater than one indent is not changed. Multi-line comments that begin a line but without the preceding '*' are indented to one indent for consistency. This can slightly modify the indentation of commented out blocks of code. Lines containing all '*' are left unchanged. Extra spacing is removed from the comment close '*/'.
--remove-comment-prefix

# Append the suffix #### instead of '.orig' to original filename (e.g. --suffix=.bak). If this is to be a file extension, the dot '.' must be included. Otherwise the suffix will be appended to the current file extension.
--suffix=.bak

# Formatted files display mode. Display only the files that have been formatted. Do not display files that are unchanged.
--formatted
